start =
    __ s:seq? {return s}

__ = ignore*

ignore =
    space
  / comment

space = [ \r\n\t]

comment = "#" [^\n]*


seq =
   s:(e:exp __ {return e})+
    {
      // if sequence contains just one element, return the element not seqn
      if (s.length == 1)
        return s[0];
      else
        return {tag: 'seqn', values: s};
    }


exp =
   seqitem
 / store
 / load


seqitem =
    note
  / block
  / par
  / repeat


note =
    p:pitch ":" d:duration {return {tag:'note', pitch: p, dur: d};}
 /  "rest:" d:duration {return {tag:'rest', duration: d};}


pitch =
    p1:[a-g] p2:[0-9] {return p1+p2;}

duration =
    d:[0-9]+ {return parseInt(d.join(""));}


block =
    "(" __ s:seq ")" {return s;}


// par -> [seq1, seq2, seq3]
par =
    "[" __ p:(s:seq "," {return s;})* __ sf:seq? "]"
      {p.push(sf); return {tag: 'parn', values: p};}


repeat =
    c:integer __ "*" __ s:seqitem
     {return {tag: 'repeat', count: c, section: s};}


store =
   n:varname __ "=" __ s:seqitem
     {return {tag: 'store', name: n, value: s};}

load =
   n:varname {return {tag: 'load', name: n};}


integer =
   h:[1-9] t:[0-9]* {return parseInt(h + t.join(""));}

varname =
   h:[a-zA-Z_] t:[a-zA-Z_0-9]* {return h + t.join('');}

